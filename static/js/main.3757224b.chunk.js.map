{"version":3,"sources":["App.js","index.js"],"names":["App","React","useState","display","setDisplay","operandBuffer","setOperandBuffer","operatorBuffer","setOperatorBuffer","awaitingNumber","setAwaitingNumber","flashDisplay","string","setTimeout","handleNumberClick","digit","indexOf","handleOperatorClick","operator","solve","parsedDisplay","parseFloat","result","toString","className","onClick","slice","rootElement","document","getElementById","ReactDOM","render"],"mappings":"uLAGe,SAASA,IAAO,MAAD,EACEC,IAAMC,SAAS,KADjB,mBACrBC,EADqB,KACZC,EADY,OAEcH,IAAMC,SAAS,GAF7B,mBAErBG,EAFqB,KAENC,EAFM,OAGgBL,IAAMC,SAAS,MAH/B,mBAGrBK,EAHqB,KAGLC,EAHK,OAIgBP,IAAMC,UAAS,GAJ/B,mBAIrBO,EAJqB,KAILC,EAJK,KAatBC,EAAe,CAACC,EAAST,KAC7BC,EAAW,IACXS,YAAW,KACTT,EAAWQ,KACV,KAGCE,EAAqBC,GAAU,KACnB,MAAZZ,GACFC,EAAWW,GACG,MAAVA,GACFL,GAAkB,IAEXD,GACTL,EAAWW,GACXL,GAAkB,IACC,MAAVK,GAAiBZ,EAAQa,QAAQ,MAAQ,GAGlDZ,EAAWD,EAAUY,IAInBE,EAAuBC,GAAa,KACpCT,EACFE,IAEAQ,IAGFX,EAAkBU,IAGdC,EAAQ,KACZ,MAAMC,EAAgBC,WAAWlB,GACjC,IAAImB,EAASF,EAEb,OAAQb,GACN,IAAK,MACHe,EAASjB,EAAgBe,EACzB,MAEF,IAAK,WACHE,EAASjB,EAAgBe,EACzB,MAEF,IAAK,WACHE,EAASjB,EAAgBe,EACzB,MAEF,IAAK,SACHE,EAASjB,EAAgBe,EAO7Bd,EAAiBgB,GACjBX,EAAaW,EAAOC,YACpBb,GAAkB,IAapB,OACE,qBAAKc,UAAU,mBAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,UAAf,SAA0BrB,IAC1B,sBAAKqB,UAAU,OAAf,UACE,wBAAQA,UAAU,SAASC,QArFrB,KACZd,EAAa,KACbL,EAAiB,GACjBE,EAAkB,MAClBE,GAAkB,IAiFZ,SACE,qBAAKc,UAAU,sBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QApBlB,KACXhB,GAA8B,MAAZN,IAEI,MAAfA,EAAQ,GACjBC,EAAWD,EAAQuB,MAAM,IAEzBtB,EAAW,IAAMD,KAcb,SACE,qBAAKqB,UAAU,sBAAf,SACE,sBAAMA,UAAU,eAAhB,sBAGJ,wBAAQA,UAAU,SAAlB,SACE,qBAAKA,UAAU,sBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASR,EAAoB,UAAxD,SACE,qBAAKO,UAAU,2BAAf,SACE,sBAAMA,UAAU,eAAhB,sBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASR,EAAoB,YAAxD,SACE,qBAAKO,UAAU,2BAAf,SACE,sBAAMA,UAAU,eAAhB,sBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASR,EAAoB,YAAxD,SACE,qBAAKO,UAAU,2BAAf,SACE,sBAAMA,UAAU,eAAhB,wBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASR,EAAoB,OAAxD,SACE,qBAAKO,UAAU,2BAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,cAAcC,QAASX,EAAkB,KAA3D,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASX,EAAkB,KAAtD,SACE,qBAAKU,UAAU,wBAAf,SACE,sBAAMA,UAAU,eAAhB,mBAGJ,wBAAQA,UAAU,SAASC,QAASR,EAAoB,SAAxD,SACE,qBAAKO,UAAU,2BAAf,SACE,sBAAMA,UAAU,eAAhB,2BCrLd,MAAMG,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC/B,EAAD,MAEF2B,I","file":"static/js/main.3757224b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [display, setDisplay] = React.useState(\"0\");\n  const [operandBuffer, setOperandBuffer] = React.useState(0);\n  const [operatorBuffer, setOperatorBuffer] = React.useState(null);\n  const [awaitingNumber, setAwaitingNumber] = React.useState(true);\n\n  const reset = () => {\n    flashDisplay(\"0\");\n    setOperandBuffer(0);\n    setOperatorBuffer(null);\n    setAwaitingNumber(true);\n  };\n\n  const flashDisplay = (string = display) => {\n    setDisplay(\"\");\n    setTimeout(() => {\n      setDisplay(string);\n    }, 50);\n  };\n\n  const handleNumberClick = (digit) => () => {\n    if (display === \"0\") {\n      setDisplay(digit);\n      if (digit !== \"0\") {\n        setAwaitingNumber(false);\n      }\n    } else if (awaitingNumber) {\n      setDisplay(digit);\n      setAwaitingNumber(false);\n    } else if (digit === \".\" && display.indexOf(\".\") >= 0) {\n      // do nothing\n    } else {\n      setDisplay(display + digit);\n    }\n  };\n\n  const handleOperatorClick = (operator) => () => {\n    if (awaitingNumber) {\n      flashDisplay();\n    } else {\n      solve();\n    }\n\n    setOperatorBuffer(operator);\n  };\n\n  const solve = () => {\n    const parsedDisplay = parseFloat(display);\n    let result = parsedDisplay;\n\n    switch (operatorBuffer) {\n      case \"ADD\":\n        result = operandBuffer + parsedDisplay;\n        break;\n\n      case \"SUBTRACT\":\n        result = operandBuffer - parsedDisplay;\n        break;\n\n      case \"MULTIPLY\":\n        result = operandBuffer * parsedDisplay;\n        break;\n\n      case \"DIVIDE\":\n        result = operandBuffer / parsedDisplay;\n        break;\n\n      default:\n        break;\n    }\n\n    setOperandBuffer(result);\n    flashDisplay(result.toString());\n    setAwaitingNumber(true);\n  };\n\n  const flipSign = () => {\n    if (awaitingNumber || display === \"0\") {\n      // do nothing\n    } else if (display[0] === \"-\") {\n      setDisplay(display.slice(1));\n    } else {\n      setDisplay(\"-\" + display);\n    }\n  };\n\n  return (\n    <div className=\"main-border-wrap\">\n      <div className=\"main\">\n        <div className=\"display\">{display}</div>\n        <div className=\"grid\">\n          <button className=\"button\" onClick={reset}>\n            <div className=\"button-texture misc\">\n              <span className=\"button-label\">C</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={flipSign}>\n            <div className=\"button-texture misc\">\n              <span className=\"button-label\">±</span>\n            </div>\n          </button>\n          <button className=\"button\">\n            <div className=\"button-texture misc\">\n              <span className=\"button-label\">%</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleOperatorClick(\"DIVIDE\")}>\n            <div className=\"button-texture operation\">\n              <span className=\"button-label\">÷</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"7\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">7</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"8\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">8</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"9\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">9</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleOperatorClick(\"MULTIPLY\")}>\n            <div className=\"button-texture operation\">\n              <span className=\"button-label\">×</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"4\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">4</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"5\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">5</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"6\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">6</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleOperatorClick(\"SUBTRACT\")}>\n            <div className=\"button-texture operation\">\n              <span className=\"button-label\">−</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"1\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">1</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"2\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">2</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\"3\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">3</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleOperatorClick(\"ADD\")}>\n            <div className=\"button-texture operation\">\n              <span className=\"button-label\">+</span>\n            </div>\n          </button>\n          <button className=\"button zero\" onClick={handleNumberClick(\"0\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">0</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleNumberClick(\".\")}>\n            <div className=\"button-texture number\">\n              <span className=\"button-label\">.</span>\n            </div>\n          </button>\n          <button className=\"button\" onClick={handleOperatorClick(\"SOLVE\")}>\n            <div className=\"button-texture operation\">\n              <span className=\"button-label\">=</span>\n            </div>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}